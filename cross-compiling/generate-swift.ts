import * as Api from "../src/api-calls";
import * as fs from "fs";
import {
  UrlRequestMetadataParameterNames,
  UrlApiMetaCommand,
  //GetAuthTokenRequest, GetAuthTokenResponse
} from "../src/url-api"

export const generateSwiftApi = () => fs.writeFileSync("./cross-compiling-out/ApiInterfaces.swift",
`// Auto-generated by dicekeys-api-js/cross-compiling/generate-swift.ts
// Generated on ${new Date().toUTCString()}

enum Commands: String, Codable {
${"\t"  +
  Api.Commands.map( command => `case ${command}`).join("\n\t")
}
}

enum MetaCommands: String, Codable {
${
  Object.keys(UrlApiMetaCommand).map( command => `    case ${command}`).join("\n\t")
}
}

enum Request {${ "\n" +
    Api.Commands.map( command =>
      `    case ${command}(` + 
      Object.keys(Api.ParameterNames[command]).sort().map(
        parameterName => `${parameterName}: String`
      ).join(", ")
    ).join(")\n")
  })
}

enum MetaInputs: String, Codable {
${"\t"  +
    Object.keys(Api.RequestMetadataParameterNames).sort().map(
      parameterName => `case ${parameterName}`
    ).join("\n\t")
  }
}

enum UrlMetaInputs: String, Codable {
${"\t"  +
    Object.keys(UrlRequestMetadataParameterNames).sort().map(
      parameterName => `case ${parameterName}`
    ).join("\n\t")
  }
}

enum SuccessResponse {${ "\n" +
    Api.Commands.map( command =>
      `    case ${command}(` +
      Object.keys(Api.SuccessResponseParameterNames[command]).sort().map(
        parameterName => `${parameterName}: String`
      ).join(", ")
    ).join(")\n")
  })
}

enum MetaOutputs: String, Codable {
${"\t"  +
    Object.keys(Api.ResponseMetadataParameterNames).sort().map(
      parameterName => `case ${parameterName}`
    ).join("\n\t")
  }
}

enum ExceptionMetaOutputs: String, Codable {
${"\t"  +
    Object.keys(Api.ExceptionParameterNames).sort().map(
      parameterName => `case ${parameterName}`
    ).join("\n\t")
  }
}
`);

/*

${
  Api.Commands.map( command => `  object ${command}Inputs = [` +
    Object.keys(Api.ParameterNames[command]).sort().map(
      parameterName => `"${parameterName}"`
    ).join(", ") + "]"
  ).join("\n")
}

${
  Api.Commands.map( command => `  object ${command}Outputs = [` +
      (Api.SuccessResponseParameters[command].sort() as string[]).map(
        parameterName => `"${parameterName}"`
      ).join(", ") + "]"
  ).join("\n")
}

*/